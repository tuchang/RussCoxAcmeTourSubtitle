1
00:00:01,001 --> 00:00:07,001
Welcome. This is a quick tour of Acme, a text editor created by Rob Pike almost 20 years ago as part of Plan 9.

3
00:00:07,001 --> 00:00:11,561
Although Rob created Acme on Plan 9, Acme is now available on FreeBSD, Linux,...

4
00:00:11,571 --> 00:00:15,231
OS X and other Unix systems as part of Plan 9 from User Space.

5
00:00:16,001 --> 00:00:21,001
There is also a port of Acme to the Inferno operating system which gives it a way to running on Windows.

7
00:00:21,001 --> 00:00:25,049
The video description has a link to a page which points to downloads and more information.

9
00:00:26,001 --> 00:00:29,958
For me, the distinguishing feature of Acme is it works well alongside the...

10
00:00:29,968 --> 00:00:33,991
surrounding system instead of trying to be a complete environment all by itself.

11
00:00:34,001 --> 00:00:38,141
Acme does not enjoy nearly the popularity of editors like Emacs and VI do,

13
00:00:39,001 --> 00:00:41,001
but it has a small dedicated following.

14
00:00:41,001 --> 00:00:45,001
When I had to switch to using Unix workstations again in the early 2000's,

15
00:00:45,001 --> 00:00:49,001
I missed Acme so much that I ported all Plan 9 user programs to Unix to get it back.

17
00:00:50,001 --> 00:00:53,408
Acme creates an experience where text is a dynamic thing and you can execute it,

18
00:00:53,418 --> 00:00:54,991
and assign it arbitrary meanings.

19
00:00:55,001 --> 00:00:59,441
where plugin written in any language at all can interact with Acme to control windows.

21
00:01:00,001 --> 00:01:05,001
The result is that you can keep using the tools you have instead of having to learn the whole new system.

23
00:01:05,001 --> 00:01:07,661
But you can still customize them to fit well into Acme.

24
00:01:08,001 --> 00:01:12,001
In this screencast I am going to try to convey a few of what it is like to use Acme.

26
00:01:12,001 --> 00:01:16,001
I am going to start with the basics and build up to a short programming session at the end.

28
00:01:16,001 --> 00:01:22,001
One final note before the content, I sized the video to fit Youtube large vidoe playing mode exactly.

30
00:01:22,001 --> 00:01:25,421
If the screen text look fuzzy, please switch to that mode.

31
00:01:29,001 --> 00:01:30,991
Because Acme was designed as part of Plan 9,

32
00:01:31,001 --> 00:01:35,631
it is a graphical program, not cursor addressed, and makes extensive use of the mouse.

34
00:01:36,001 --> 00:01:38,991
This screen you are looking at is a small Acme screen.

35
00:01:39,001 --> 00:01:42,181
Its size fits exactly to Youtube 854 by 480 video box.

36
00:01:43,001 --> 00:01:44,991
Normally you use a larger display.

37
00:01:45,001 --> 00:01:48,781
I'd like to to use Acme with fullscreen as you see in the video.

38
00:01:48,781 --> 00:01:53,001
On a laptop I foot back and forth between Acme and conventional desktop.

39
00:01:53,001 --> 00:01:57,001
When I work I use two monitors, where Acme on one, and everything else on the other.

40
00:01:57,001 --> 00:02:00,001
Acme takes care of window layout for you.

41
00:02:00,001 --> 00:02:04,001
It automatically choosing location for each window and arrange them into columns.

42
00:02:04,001 --> 00:02:06,001
In this tour, Acme has just two columns.

43
00:02:06,001 --> 00:02:09,001
On larger screens, it can comfortablly supports 3 or 4.

44
00:02:09,001 --> 00:02:12,001
Each column contains some number of windows.

45
00:02:12,001 --> 00:02:17,001
On the screen right now, the left column contains the single window showing a quick UI tour.

46
00:02:17,001 --> 00:02:21,001
And the right column contains two windows showing a directory and a shell session.

48
00:02:21,001 --> 00:02:23,001
Each window has two parts. 

49
00:02:23,001 --> 00:02:27,001
The top line, or tag, set on light blue background,

50
00:02:27,001 --> 00:02:30,001
shows the filename and some commands such as Del and Snarf.

51
00:02:30,001 --> 00:02:35,001
The body, set on light yellow background, shows the window content.

52
00:02:35,001 --> 00:02:39,001
Each tag has a nearly square layout box to the left of the tag.

53
00:02:39,001 --> 00:02:44,001
The layout box fills with dark blue when a window has editing that indicates you might want to save it.

54
00:02:44,001 --> 00:02:46,001
Each column also has a  tag 

55
00:02:46,001 --> 00:02:50,001
with some useful commands and layout box at the tone.

56
00:02:50,001 --> 00:02:53,001
Because Acme was created on Plan 9, 

57
00:02:53,001 --> 00:02:56,001
its UI assumes that you have a three-button mouse and a graphical display.

58
00:02:56,001 --> 00:02:59,001
There is no text-only mode or cursor addressing.

59
00:02:59,001 --> 00:03:03,001
Since you cannot watch my hand using the mouse on the screencast,

60
00:03:03,001 --> 00:03:07,001
I have to modiy Acme to show the buttons that are currently held down at the mouse pointer.

61
00:03:07,001 --> 00:03:13,001
Acme refers left, middle, and right buttons as button 1, button 2, and button 3.

62
00:03:13,001 --> 00:03:17,001
The scroll bar to the left of the body is a vetnum standard,

63
00:03:17,001 --> 00:03:19,001
but more powerful than most.

64
00:03:19,001 --> 00:03:23,001
When you have a window that cannot be shown at once like the silly sampler.

65
00:03:26,001 --> 00:03:33,001
The scroll bar darkens to represent the entire content, with the light bar showing currently you are viewing.

66
00:03:33,001 --> 00:03:37,001
You can click the bar with button 2 to move it to different part of the text.

67
00:03:37,001 --> 00:03:42,001
You can also click with button 1 to scroll up or button 3 to scroll down.

68
00:03:42,001 --> 00:03:49,001
The amount of these clicks to scroll depends on where on the scroll bar you click.

69
00:03:49,001 --> 00:03:53,001
If you click just one line down from the top, each click scrolls by one line.

70
00:03:53,001 --> 00:03:58,001
If you click three quaters away down from the window, 

71
00:03:58,001 --> 00:04:00,001
each click scrolls by three quaters of the window.

72
00:04:02,001 --> 00:04:05,001
You can also use the mouse to manipulate the window by

73
00:04:05,001 --> 00:04:06,001
clicking in the layout box.

74
00:04:07,001 --> 00:04:10,001
Clicking button 1 expands the window in the column,

75
00:04:10,001 --> 00:04:11,001
nugging other windows away.

76
00:04:11,001 --> 00:04:16,001
Dragging button 1 reposition the window without moving others.

77
00:04:16,001 --> 00:04:22,001
Clicking button 2 makes the window as big as possible while leaving the other windows tags visible.

78
00:04:22,001 --> 00:04:27,001
Clicking button 3 makes the window take over the entire column, hiding the other windows.

79
00:04:27,001 --> 00:04:32,001
Clicking one of the other buttons brings them back.

80
00:04:46,001 --> 00:04:50,001
When manipulating text within Acme, the three buttons have distinct roles.

81
00:04:50,001 --> 00:04:52,001
Button 1 is for selecting text.

82
00:04:54,001 --> 00:04:57,001
Button 2 is for executing commands.

83
00:04:57,001 --> 00:05:01,001
For example, I have been clicking the "Slide+" command to advance to the next slide.

84
00:05:01,001 --> 00:05:04,001
Button 3 is for searching and loading.

85
00:05:04,001 --> 00:05:10,001
If I select the word "button"  with button 3, Acme searches for the next instance of the word "button" and moves to it.

86
00:05:10,001 --> 00:05:15,001
In the directory window, if I select the filename "sampler" with button 3,

87
00:05:15,001 --> 00:05:18,001
Acme opens a new window for that file.

88
00:05:18,001 --> 00:05:23,001
I can then execute, using button 2, the command "Del" to close the window.

89
00:05:23,001 --> 00:05:28,001
I do not have to select text so carefully, when using button 2 or 3,

90
00:05:28,001 --> 00:05:32,001
Acme would expend an ordinary click into selection of the given word.

91
00:05:32,001 --> 00:05:38,001
So I can just right click on "button", or on "sampler", and just middle click "Del".

92
00:05:40,001 --> 00:05:45,001
Acme also assigns convinient meaning to combinations of buttons. 

93
00:05:45,001 --> 00:05:47,001
If you select some text with  button 1,

94
00:05:47,001 --> 00:05:51,001
but keep it held down, then clicking button 2 cuts that text.

95
00:05:51,001 --> 00:05:54,001
Clicking button 3 pastes over the text.

96
00:05:54,001 --> 00:05:55,001
Cut

97
00:05:55,001 --> 00:05:57,001
Paste

98
00:06:00,001 --> 00:06:04,001
A frequent motion is to combine the two -- selecting text with button 1

99
00:06:04,001 --> 00:06:09,001
Clicking button 2 to cut it, and click button 3 to paste it back, before releasing button 1.

100
00:06:09,001 --> 00:06:10,001
that amounts to "Copy".

101
00:06:10,001 --> 00:06:14,001
A less common "chord" is to select text with button 2 for executing, but

102
00:06:14,001 --> 00:06:19,001
add button 1 to the cord. That executes that command with an argument.

103
00:06:20,001 --> 00:06:27,001
For example, we can execute the command "echo" with argument "button".

104
00:06:31,001 --> 00:06:35,001
Let's look a little more in depth at executing commands with button 2.

105
00:06:35,001 --> 00:06:39,001
We'v seen that useful commands like Del are listed  in the window tag.

106
00:06:39,001 --> 00:06:42,001
But the tag is just a nice place to put text that doesn't belong to the body.

107
00:06:42,001 --> 00:06:44,001
Text at anywhere can be executed.

108
00:06:44,001 --> 00:06:49,001
For example, I can select the word "Cut" here with button 1,

109
00:06:49,001 --> 00:06:53,001
and click on it with button 2 to execute it. It cuts itself.

110
00:06:53,001 --> 00:06:59,001
Similarly, I can select something else, and then execute "Paste".

111
00:06:59,001 --> 00:07:00,001
to paste what I cut.

112
00:07:00,001 --> 00:07:08,001
There is also a useful builtin command called "Edit" , that accepts the editing language used in the editor Sam.

113
00:07:11,001 --> 00:07:19,001
If I execute the comand "Edit, s/tag/TAG/g", it apply the "s" command to entire window body, denoted by comma.

114
00:07:22,001 --> 00:07:27,001
Acme would not be very powerful though if all the commands have to be provided by Acme itself.

115
00:07:27,001 --> 00:07:33,001
External programs can be invoked as commands too, like we do with "echo", similar to running them in the shell prompt.

116
00:07:33,001 --> 00:07:40,001
Executing "date" actually runs the "date" program and put the output in a temporary window created to hold the output.

117
00:07:40,001 --> 00:07:47,001
When you run a command in a particular directory, the window for the output has a title name for a file "+Errors" in that directory,

118
00:07:47,001 --> 00:07:53,001
although that is a name of a file that does not exist on disk. It is just the Acme title for the window.

119
00:07:53,001 --> 00:07:58,001
In addtion to running commands, we can pipe selected text through commands.

120
00:07:58,001 --> 00:08:05,001
For example, I can selet top few lines and execute "|rot13" to pipe the text through rot13 program,

121
00:08:05,001 --> 00:09:00,001
and replace the selection with that program's output.

122
00:09:00,001 --> 00:08:14,001
Commands beginning with ">" represents a pipe only write selection through that program.

123
00:08:14,001 --> 00:08:17,001
It does not read the result back into the selection.

124
00:08:17,001 --> 00:08:22,001
If I click ">spell", it pipes the selected text to "spell".

125
00:08:22,001 --> 00:08:25,001
which tells me with one of the error window that I mis-spelled "execute".

126
00:08:25,001 --> 00:08:32,001
Similarly, a command beginning with "<" only reads the commands output into the selection.

127
00:08:32,001 --> 00:08:36,001
The command runs with no input.

128
00:08:36,001 --> 00:08:39,001
Clicking on the line "<astro" runs the astro program.

129
00:08:39,001 --> 00:08:41,001
which tells which I can see in the sky and when.

130
00:08:43,001 --> 00:08:48,001
As I said earlier, it is more common to keep commands in the tag than in the window body.

131
00:08:48,001 --> 00:08:51,001
I have two tiny scripts of my own called "a+" and "a-".

132
00:08:51,001 --> 00:08:53,001
they indent and unindent text.

133
00:08:53,001 --> 00:08:59,001
When I am working on a program, I often have both of them on the tag and waiting for help out.

134
00:09:09,001 --> 00:09:14,001
Now let's look into a little more about loading text with button 3.

135
00:09:14,001 --> 00:09:21,001
We've seen that we can search for literal text and load files, but in fact the syntax used here is quite rich.

137
00:09:22,001 --> 00:09:27,001
We saw before that loading file of that directory name and open file of that directory.

138
00:09:27,001 --> 00:09:31,001
If file is followed by a colon line number,

139
00:09:31,001 --> 00:09:34,001
Acme opens the file to that line.

140
00:09:34,001 --> 00:09:37,001
The next address is pretty advenced.

141
00:09:37,001 --> 00:09:42,001
It says it is at the third line, but then the "-" moves to the beginning of the line, 

142
00:09:42,001 --> 00:09:46,001
and "+#8" moves forward 8 Unicode characters.

143
00:09:46,001 --> 00:09:49,001
which puts the cursor just inside the code string "fmt".

144
00:09:50,001 --> 00:09:56,001
In my local Acme settings, I have ":3:9" setup as a shorthand for the last address.

145
00:09:56,001 --> 00:10:01,001
That the format you'v seen in error messages from some compilers these days.

146
00:10:01,001 --> 00:10:07,001
Addresses don't have to be numbers either. They can be regular expression searches enclosed in slashes.

148
00:10:07,001 --> 00:10:12,001
The next address opens "hello.go", searches for the word "func" at the beginning of a line,

149
00:10:12,001 --> 00:10:17,001
starts the selection there, and ends it with the first closing brace at the beginning of a line.

150
00:10:17,001 --> 00:10:23,001
One common use of this rich address syntax is to create some kind of hyperlinking even in text files like programs.

151
00:10:23,001 --> 00:10:28,001
For example, here is a comment I wrote some number of years ago in the Plan 9 kernel.

152
00:10:28,001 --> 00:10:32,001
That comment says that "sysfile.c:/^sys8unmount" might be useful to look at.

153
00:10:32,001 --> 00:10:38,001
And we can just by right clicking on the text.

154
00:10:39,001 --> 00:10:46,001
Of course as I mentioned the basic form of the address syntax is conventional "file:line:number" generated by Unix tools like compilers and grep.

155
00:10:46,001 --> 00:10:50,001
Let's run "hello.go"

156
00:10:55,001 --> 00:10:58,001
The compiler tells that there is a syntax error in line 6.

157
00:10:58,001 --> 00:11:00,001
Cliking on the error takes us straight to that line.

158
00:11:00,001 --> 00:11:06,001
And we can see that there really is a newline of string, because we use the wrong closing quote.

159
00:11:06,001 --> 00:11:09,001
This works even for files that are not already opened.

160
00:11:09,001 --> 00:11:14,001
The program "g" runs "grep -n" of all source files in a directory.

161
00:11:14,001 --> 00:11:18,001
Executing "g main" shows us the matches for main.  

162
00:11:18,001 --> 00:11:22,001
Here we have 2 in "hello.go" and 1 in smily-smily-smily.c.

163
00:11:22,001 --> 00:11:26,001
Perhaps I should point out specificially here that Acme supports Unicode in UTF-8.

164
00:11:26,001 --> 00:11:29,001
and of course it is the first editor to do so.

165
00:11:29,001 --> 00:11:33,001
If you are wondering what smily-smily-smily.c is, here is what it is.

166
00:11:33,001 --> 00:11:35,001
I believe it was written by Dennis Ritchie.

167
00:11:37,001 --> 00:11:40,001
I think of Acme as an IDE done right.

168
00:11:40,001 --> 00:11:54,001
Wikipedia says that "An IDE is a software application ..." (on the screen)

169
00:11:54,001 --> 00:11:56,001
An IDE tries to do everything.

170
00:11:56,001 --> 00:11:58,001
Acme takes a different approach.

171
00:11:58,001 --> 00:12:04,001
It does provide the editor part, but it assumes you already got all other tools and just want to use them effectively.

172
00:12:04,001 --> 00:12:09,001
It likes Unix or Plan 9 provide the development environment and only worries about integration.

173
00:12:09,001 --> 00:12:12,001
That is, it does not try to reinvent everything.

174
00:12:12,001 --> 00:12:16,001
It integrates tools that are already on your system and helps you use them more effectively.

175
00:12:16,001 --> 00:12:20,001
It fits into the surrounding system, in this case, Unix.

176
00:12:20,001 --> 00:12:23,001
That brings us to exactly how it interacts with other tools.

177
00:12:23,001 --> 00:12:28,001
Because Acme starts on Plan 9, it presents to other tools as a filesystem.

178
00:12:28,001 --> 00:12:33,001
On Unix, Acme still serves the Plan 9 file protocol, 

179
00:12:33,001 --> 00:12:35,001
but there are helper programs that will talk to it for you if your language cannot.

180
00:12:35,001 --> 00:12:40,001
The desktop program is FUSE, which enables you to mount Acme directly into the file tree.

181
00:12:40,001 --> 00:12:43,001
But FUSE is not a requirement.

182
00:12:43,001 --> 00:12:46,001
Let's look around it.

183
00:12:47,001 --> 00:12:51,001
Each window shows as a subdirectory under "/mnt/acme".

184
00:12:51,001 --> 00:12:54,001
The "index" gives a list of all the windows and their tags.

185
00:12:55,001 --> 00:13:00,001
This list is supposed for processing by programs but not people, so it has a rigid format.

186
00:13:00,001 --> 00:13:05,001
We can see the FS window here. The first number gives the window ID, 2.

187
00:13:06,001 --> 00:13:11,001
In that window's directory, we can read the tag by reading the "tag" file.

188
00:13:13,001 --> 00:13:16,001
Or we can read the body by reading the body file.

189
00:13:17,001 --> 00:13:19,001
We even write to the body by writing to the file.

190
00:13:24,001 --> 00:13:27,001
We can run Unix tools like grep or spell,

191
00:13:27,001 --> 00:13:32,001
but we can also run programs that know about the Acme filesystem to good fact.

192
00:13:32,001 --> 00:13:34,001
We have been running one of them this whole time --

193
00:13:34,001 --> 00:13:41,001
the "Slide+" command is a little shell script I wrote few years ago for giving talks to use text file slides from within Acme.

194
00:13:41,001 --> 00:13:43,001
Let's look at it.

195
00:13:43,001 --> 00:13:45,001
It does two interesting things.

196
00:13:45,001 --> 00:13:49,001
First, it finds the name of the current window using "$%",

197
00:13:49,001 --> 00:13:52,001
then it does a grabbing around to figure out what the next slide is,

198
00:13:52,001 --> 00:13:58,001
and then finally, it invokes the "Slide" command to load it in the current window.

199
00:13:58,001 --> 00:14:02,001
The "Slide" command is simpler and more interesting.

200
00:14:02,001 --> 00:14:07,001
It writes three control messages, just text strings, into the current windows' control file.

201
00:14:07,001 --> 00:14:09,001
Just has the name shown in the tag, 

202
00:14:09,001 --> 00:14:12,001

203
00:14:12,001 --> 00:14:14,001
mark the file clean to clear the blue error box, 

204
00:14:14,001 --> 00:14:18,001
and then invoke "get" to reload the window content from its current filename.

205
00:14:18,001 --> 00:14:21,001
Everytime we advence slides, this script's running.

206
00:14:21,001 --> 00:14:23,001
Another example is the "adict" program.

207
00:14:23,001 --> 00:14:26,001
It is a dictionary for Acme.

208
00:14:26,001 --> 00:14:32,001
If I execute adict with "Acme", it creates a new window showing me the definition of the word "Acme".

209
00:14:32,001 --> 00:14:38,001
Inside dictionary windows, button 3's load functionality has been defined to meet look up a word.

210
00:14:38,001 --> 00:14:43,001
So if I type "computer" in the tag, and then right click on it, 

211
00:14:43,001 --> 00:14:48,001
we get a new window showing the definition for "computer" -- "One who computers".

212
00:14:48,001 --> 00:14:53,001
This is using the Project Guternburg's Web dictionary which dates from 1913,

213
00:14:53,001 --> 00:14:58,001
so it is not quite up to date with modern usage, but it is freely available for to install it on your machine.

214
00:14:59,001 --> 00:15:03,001
adict is a shell script. It is a pretty long shell script.

215
00:15:03,001 --> 00:15:05,001
We won't go through it in detail.

216
00:15:05,001 --> 00:15:10,001
But the important part is that we re-define mouse clicks from the window's event file.

217
00:15:10,001 --> 00:15:14,001
and then invokes the "event" function here to response to each click or event.

218
00:15:14,001 --> 00:15:19,001
The ML events, indicate a mouse-driven load event, 

219
00:15:19,001 --> 00:15:24,001
In response, the script creates a new dictionary window showing the definition of the loaded word.

220
00:15:26,001 --> 00:15:32,001
The program "win", that have been running over here to show you the filesystem, is not an Acme builtin.

221
00:15:32,001 --> 00:15:37,001
It is an external command like "adict", although it is a C program, but not a shell script.

222
00:15:37,001 --> 00:15:41,001
It starts a new window and a new shell, and cross connects them.

223
00:15:41,001 --> 00:15:45,001
Everytime you complete a line in the window, it sends that line to the shell.

224
00:15:45,001 --> 00:15:50,001
Everytime the shell prints something, it adds that line to the window.

335
00:15:50,001 --> 00:15:52,001
It is an internal program in some sense.

336
00:15:52,001 --> 00:15:55,001
but really it is just a shell session synced with an Acme window.

337
00:15:55,001 --> 00:15:59,001
Because it is an Acme window, you can of course go back and edit anything.

338
00:15:59,001 --> 00:16:02,001
Until you hit there, you can even edit the current input line.

339
00:16:02,001 --> 00:16:07,001
You can also edit all the history: to cut out unnecessary pieces,

340
00:16:07,001 --> 00:16:08,001
or mark things that look interesting.

341
00:16:12,001 --> 00:16:15,001
When I was debugging low level problems in the Go runtime,

342
00:16:15,001 --> 00:16:16,001
I often run gdb in the win windows,

343
00:16:16,001 --> 00:16:21,001
and then typing my own notes all over the gdb output, as I work off tough debugging session.

344
00:16:21,001 --> 00:16:27,001
"win" re-defines the middle click execution to mean "send that to the shell".

345
00:16:27,001 --> 00:16:32,001
A commonly used is to edit the command line you typed earlier and re-execute it.

346
00:16:33,001 --> 00:16:37,001
I work for many years in the shell without history or command line editing,

347
00:16:37,001 --> 00:16:40,001
and I never missed it because Acme is providing this for me.

348
00:16:40,001 --> 00:16:45,359
Over the years, people have written many intersting Acme client programs,

349
00:16:46,001 --> 00:16:49,359
including a mail reader, a debugger, chat and IRC clients, and a music player.

350
00:16:50,001 --> 00:15:56,001
And you can write them in any language -- shell script, C, Go, Python, whatever you like,

351
00:15:56,001 --> 00:16:59,001
maybe even E-lisp if you want that kind of thing.

352
00:17:00,001 --> 00:17:03,001
Button 2 isn't the only one who seem these tricks,

353
00:17:03,001 --> 00:17:05,001
button 3 can do some fun things too.

354
00:17:05,001 --> 00:17:07,001
We saw that you can load files or directories,

355
00:17:07,001 --> 00:17:11,001
with the rich addressing you specify the parts of a file you care about.

356
00:17:11,001 --> 00:17:14,001
Button 3 can also synthesize new window content.

357
00:17:14,001 --> 00:17:18,001
For example, if you right click on "acme(1)" here,

358
00:17:18,001 --> 00:17:22,001
it brings up a new window with Acme's man page.

359
00:17:22,001 --> 00:17:26,001
At the button of that man page, is a reference to another page --

360
00:17:28,001 --> 00:17:31,001
"acme(4)", describing the filesystem.

361
00:17:31,001 --> 00:17:34,001
Want to read it? Right click.

362
00:17:34,001 --> 00:17:39,001
Or, here is a file containing the output of the mercurial command,

363
00:17:39,001 --> 00:17:42,001
showing some commits that I did (?) for the yacc program.

364
00:17:42,001 --> 00:17:47,001
Want to see a particular commit? Right click on the hash.

365
00:17:50,001 --> 00:17:52,001
Or, here is a UPS that I was expecting.

366
00:17:52,001 --> 00:17:56,001
What to see the status? (Right click the tracking number.)

367
00:17:56,001 --> 00:17:57,001
You get the idea.

368
00:17:57,001 --> 00:18:01,001
The results below doesn't have to be in Acme window either.

369
00:18:01,001 --> 00:18:04,001
In this demo directory, I have a few PDF fiels.

370
00:18:04,001 --> 00:18:07,001
Want to view them? Right click.

371
00:18:09,001 --> 00:18:13,001
Or, here is a URL. What is there? (Right click.)

372
00:18:14,001 --> 00:18:17,001
The loading here is done by a separate program called "plumber".

373
00:18:17,001 --> 00:18:20,001
The plumber is controlled by a rule file "/mnt/plumb/rules".

374
00:18:20,001 --> 00:18:25,001
That contains patterns to match against button 3 text.

375
00:18:26,001 --> 00:18:31,001
This rules says that if the text ends in ".PDF" and the name is an existing file,

376
00:18:31,001 --> 00:18:39,001
it should be passed to the Plan 9 "page" program, which is a simple PostScript and PDF viewer you saw.

377
00:18:39,001 --> 00:18:44,001
Similarly, if the text begings with "http" or otherwise looks like a URL, 

378
00:18:44,001 --> 00:18:47,001
it should be handled by the Web browser.

379
00:18:48,001 --> 00:18:53,001
The rules on yours are right (?).  On Plan 9, when programs are crashed,  

380
00:18:53,001 --> 00:18:57,001
the kernel left the processes around like Unix zombies for debugging, instead of writting core files.

351
00:18:57,001 --> 00:19:02,001
When your program crashes then the shell will show the reason and process ID, not core dumped.

352
00:19:02,001 --> 00:19:07,001
I used to use a plumbing rule that when I right click on a number corresponding to a process,

353
00:19:07,001 --> 00:19:11,001
which starts a new window with a debugger running and attached to that process.

354
00:19:11,001 --> 00:19:16,001
I also had a rule that when I right click on a phone number, it would turn on the speaker on my desk and dial that number.

355
00:19:16,001 --> 00:19:21,001
The nicest thing about this is that the click logic is separated from the text formatting.

356
00:19:21,001 --> 00:19:28,001
In Web pages, the author of the page has to decide how to interpret the text, where the links are, and where they should go.

357
00:19:28,001 --> 00:19:34,001
In the plumbing rules, you control how pre-existing unlinked text get re-interpreted.

358
00:19:34,001 --> 00:19:38,001
Let us go through a simple example of using Acme to write some programs.

359
00:19:38,001 --> 00:19:41,001
Let's see if we can fix Go issue 3942.

360
00:19:41,001 --> 00:19:45,001
What was that again? (Select the text using right button to check the issue.)

361
00:19:45,001 --> 00:19:49,001
Alright, JSON is reading one byte at the end of the array,

362
00:19:49,001 --> 00:19:52,001
whick means block reading of network data that isn't really coming.


363
00:19:52,001 --> 00:19:55,001
I feel that I had fixed this before actually.

364
00:19:55,001 --> 00:19:57,001
Let's look at this program. (Right clicking the URL to open it.)

365
00:19:57,001 --> 00:20:02,001
Let's copy and turn this into text to do some test and development.

366
00:20:15,001 --> 00:20:20,001
This is about streaming, so let's put it in "stream_test.go".

367
00:20:22,001 --> 00:20:23,001
I am going to introduce a new Acme program called "Watch".

368
00:20:23,001 --> 00:20:25,001
It watches the current directory.

369
00:20:25,001 --> 00:20:30,001
And each time somethings changes in the direcotry, it re-runs the command given to it as an argument.

370
00:20:30,001 --> 00:20:33,001
It maintains the current output in a separate windows.

371
00:20:33,001 --> 00:20:39,001
Here, I am going to watch the output of running the short test for this package.

372
00:20:40,001 --> 00:20:43,001
Right now it passes. It's good.

373
00:20:45,001 --> 00:20:46,001
Let's add our text. 

374
00:20:47,001 --> 00:20:57,001
(Type, paste text by clicking button 3, and middle click "Put".)

374
00:20:57,001 --> 00:21:01,001
Oops, compile errors. Looks like saying unimported "net".

375
00:21:01,001 --> 00:21:05,001
And this is already in the JSON package; you don't need that.

376
00:21:05,001 --> 00:21:13,001
(Import package "net" and click "Put")

377
00:21:13,001 --> 00:21:16,001
And now we have a deadlock.

378
00:21:16,001 --> 00:21:21,001
You can see that "json.Decoder.readValue" has called the "Read" method.

379
00:21:21,001 --> 00:21:24,001
We think it shouldn't be reading that far.

380
00:21:24,001 --> 00:21:27,001
So let's go to the context of this "read" call, and see why it started the call.

381
00:21:27,001 --> 00:21:31,001
I am really surprised that this is reading too far.

382
00:21:31,001 --> 00:21:34,001
I really thought I've fixed this.

383
00:21:41,001 --> 00:21:47,001
Aha! I did fix this. But I only fixed it for JSON objects, which uses curely braces.

384
00:21:47,001 --> 00:21:51,001
JSON arrays which uses square brackets still read too far.

385
00:21:51,001 --> 00:21:53,001
So we need to treat arrays like objects.

386
00:21:53,001 --> 00:21:58,001
Let's see what this "scanEndObject" is.

387
00:21:58,001 --> 00:22:02,001
Hmm. This looks like the definition.

388
00:22:02,001 --> 00:22:09,001
Yes. Thankfully, there is already an "scanEndArray".  So let us just treat that the same way.

389
00:22:21,001 --> 00:22:23,001
And we are done. Alright, bug fixed.

399
00:22:29,001 --> 00:22:35,001
So that is Acme. It is a textual programming system.  It only supports text, no graphics at all.

340
00:22:35,001 --> 00:22:37,001
I like to think it as an integrating development environment.

341
00:22:37,001 --> 00:22:41,001
because it integrates the separate pieces you already have in your current development environment.

342
00:22:41,001 --> 00:22:49,001
You can extending Acme by writing programs that interact with it, or manage windows, or by writing plumbing rules to re-define what loading means.

343
00:22:49,001 --> 00:22:52,001
And you can write these extensions in any language you want.

344
00:22:52,001 --> 00:22:56,001
We saw dictionaries written in shell script, the terminal window written in C,

345
00:22:56,001 --> 00:22:58,001
and the Watch program written in Go.

346
00:22:58,001 --> 00:23:02,001
I've been using Acme as my day-to-day work environment for over an decade now.

347
00:23:02,001 --> 00:23:05,001
I found it an incredibally productive way to work.

348
00:23:05,001 --> 00:23:10,001
If you want to try it out, visit my blog with the link on the screen and the video description.

349
00:23:10,001 --> 00:23:14,001
Thanks for watching.